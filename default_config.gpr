--  Configuration for ada_lib generated by Alire
abstract project Default_Config is

   Ada_Compiler_Switches := External_As_List ("ADAFLAGS", " ");
   Ada_Compiler_Switches := Ada_Compiler_Switches &
          (
            "-U",  "-gnatu"
           ,"-gnat2012"
           ,"-Wl,-Map=output.map"
           ,"-gnatE" -- dynamic elaboration
--         ,"-gnatel" -- elaboration info
           ,"-Og" -- Optimize for debug
--         ,"-ffunction-sections" -- Separate ELF section for each function
--         ,"-fdata-sections" -- Separate ELF section for each variable
           ,"-g" -- Generate debug info
           ,"-gnata"  -- Enable assert and pre,post conditions
           ,"-gnatwa" -- Enable all warnings
           ,"-gnatw.X" -- Disable warnings for No_Exception_Propagation
           ,"-gnatVa" -- All validity checks
--         ,"-gnaty3" -- Specify indentation level of 3
--         ,"-gnatya" -- Check attribute casing
           ,"-gnatyA" -- Use of array index numbers in array attributes
           ,"-gnatyB" -- Check Boolean operators
--         ,"-gnatyb" -- Blanks not allowed at statement end
--         ,"-gnatyc" -- Check comments
           ,"-gnaty-d" -- Disable check no DOS line terminators present
           ,"-gnatye" -- Check end/exit labels
           ,"-gnatyf" -- No form feeds or vertical tabs
--         ,"-gnatyh" -- No horizontal tabs
--         ,"-gnatyi" -- Check if-then layout
--         ,"-gnatyI" -- check mode IN keywords
--         ,"-gnatyk" -- Check keyword casing
--         ,"-gnatyl" -- Check layout
--         ,"-gnatym" -- Check maximum line length
--         ,"-gnatyn" -- Check casing of entities in Standard
           ,"-gnatyO" -- Check that overriding subprograms are explicitly marked as such
           ,"-gnatyp" -- Check pragma casing
--         ,"-gnatyr" -- Check identifier references casing
           ,"-gnatyS" -- Check no statements after THEN/ELSE
--         ,"-gnatyt" -- Check token spacing
--         ,"-gnatyu" -- Check unnecessary blank lines
           ,"-gnatyx" -- Check extra parentheses
          );
   OS_VERSION := External ("OS_VERSION", "");

   -- OS_Major_Version := Filter_Out (Split (OS_VERSION), "\..*");
   Linker_Options := ( );
   case OS_Version is

      when "12.7.4"=>
         Linker_Options := ( );

      when Others =>
         Linker_Options := ( "-Wl,-ld_classic" );

   end case;
end Default_Config;

